version: '3.9'

services:
  #postgresql:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    build: ./docker/postgres
    hostname: ${POSTGRES_HOSTNAME}
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./docker/postgres/postgresql.conf.sample:/usr/share/postgresql/postgresql.conf.sample
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres:/var/lib/postgresql/data
    command: postgres -c 'max_connections=500'
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    networks:
      - ezbuy-network


  #pgadmin:
  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_VERSION}
    container_name: pgadmin
    restart: unless-stopped
    ports:
      - "${PGADMIN_LISTEN_PORT}:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL
      - PGADMIN_DEFAULT_PASSWORD
    networks:
      - ezbuy-network


  #keycloak:
  keycloak:
    image: keycloak/keycloak:${KEYCLOAK_VERSION}
    container_name: keycloak
    command: start-dev
    restart: always
    depends_on:
      - postgres
    ports:
      - "${KEYCLOAK_PORT}:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      # KC_DB: h2
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      # KC_PROXY_ADDRESS_FORWARDING: true
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      # KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
      KC_HTTPS_PORT: 8443
    volumes:
#      - ./docker/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./docker/keycloak/themes/ezbuy/theme:/opt/keycloak/themes
      - keycloak:/opt/keycloak/data
    networks:
      - ezbuy-network


  #minio
  minio:
    image: minio/minio:${MINIO_VERSION}
    container_name: minio
    env_file: .env
    restart: unless-stopped
    ports:
      - "9000:9000" #Buckets
      - "9001:9001" #Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
#      - ./docker/minio/data:/data:ro
      - minio:/data:rw
    command: [ "server", "--address", ":9000", "--console-address", ":9001", "/data" ]
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:9000/minio/health/live" ]
      interval: 60s
      timeout: 10s
      retries: 3
    networks:
      - ezbuy-network


  #swagger-ui
  swagger-ui:
    image: swaggerapi/swagger-ui:${SWAGGER_VERSION}
    container_name: swagger-ui
    restart: unless-stopped
    environment:
      - BASE_URL=/swagger-ui
      - URLS
      - OAUTH_CLIENT_ID=swagger-ui
      - OAUTH_USE_PKCE=true
    networks:
      - ezbuy-network


  #zookeeper
  zookeeper:
    image: debezium/zookeeper:${ZOOKEEPER_VERSION}
    restart: always
    container_name: zookeeper
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    networks:
      - ezbuy-network


  #kafka
  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    hostname: ${KAFKA_SERVICE_HOST}
    depends_on:
      - zookeeper
    container_name: kafka
    restart: unless-stopped
    ports:
      - ${KAFKA_SERVICE_PORT}:${KAFKA_SERVICE_PORT}
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID
      - KAFKA_ZOOKEEPER_CONNECT
      - KAFKA_ADVERTISED_LISTENERS
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
      - KAFKA_INTER_BROKER_LISTENER_NAME
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
    networks:
      - ezbuy-network


  #kafka-connect
  kafka-connect:
    image: debezium/connect:${KAFKA_CONNECT_VERSION}
    restart: always
    container_name: kafka-connect
    ports:
      - "8083:8083"
      - "5005:5005"
    depends_on:
      - kafka
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=kafka_connect_configs
      - OFFSET_STORAGE_TOPIC=kafka_connect_offsets
    networks:
      - ezbuy-network


  ###########################
  #setup
  #elasticsearch
  #logstash
  #kibana
  ###########################
  setup:
    profiles:
      - setup
    build:
      context: ./docker/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: setup
    init: true
    volumes:
      - ./docker/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./docker/setup/lib.sh:/lib.sh:ro,Z
      - ./docker/setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    networks:
      - ezbuy-network

  #elasticsearch
  elasticsearch:
    build:
      context: ./docker/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    restart: unless-stopped
    networks:
      - ezbuy-network

  #logstash
  logstash:
    build:
      context: ./docker/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: logstash
    volumes:
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - ezbuy-network

  #kibana
  kibana:
    build:
      context: ./docker/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    container_name: kibana
    volumes:
      - ./docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - ezbuy-network

  #memos
  memos:
    image: neosmemo/memos:stable
    container_name: memos
    volumes:
      - memos:/var/opt/memos
    ports:
      - "5230:5230"
    networks:
      - ezbuy-network


# networks:
networks:
  ezbuy-network:
    driver: bridge
    name: ezbuy-network
    external: true
#  proxy:
#    external: true
#  keycloak:

# volumes:
volumes:
  postgres:
  pgadmin:
  keycloak:
  minio:
  memos:
  elasticsearch:

